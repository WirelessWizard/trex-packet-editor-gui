apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'

group = 'com.xored'
version = '1.00-SNAPSHOT'

description = """TRex Scapy Packet Editor GUI Application"""

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

mainClassName='com.xored.javafx.packeteditor.TRexPacketCraftingTool'
if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}

repositories {
    mavenLocal()
    mavenCentral()
}

sourceSets {
    intTest {
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + sourceSets.main.output + configurations.testRuntime

        java {
            srcDirs = ['src/integration-test/java']
        }
    }
    uiTest {
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + sourceSets.main.output + configurations.testRuntime

        java {
            srcDirs = ['src/ui-test/java']
        }
    }

}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task intTest(type: Test) {
    description 'Runs Scapy Server integration testing'
    outputs.upToDateWhen { false }
    testClassesDir = sourceSets.intTest.output.classesDir
    classpath = sourceSets.intTest.runtimeClasspath

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

task uiTest(type: Test) {
    description 'Runs UI testing(E2E)'
    outputs.upToDateWhen { false }
    testClassesDir = sourceSets.uiTest.output.classesDir
    classpath = sourceSets.uiTest.runtimeClasspath

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }

    if (project.hasProperty('headless')) {
        // for running JavaFX tests headless using Monocle
        jvmArgs "-Dheadless=true"
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked"
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.testfx:testfx-core:4.0.+"
    testCompile "org.testfx:testfx-junit:4.0.+"
    testRuntime "org.testfx:openjfx-monocle:1.8.0_20"

    compile group: 'com.google.inject', name: 'guice', version: '4.0'
    compile group: 'org.zeromq', name: 'jeromq', version: '0.3.2'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'

    if (project.hasProperty('jdk31')) {
        // optional compatibility with JDK < 1.8 u40
        compile group: 'org.controlsfx', name: 'openjfx-dialogs', version: '1.0.3'
        compile group: 'org.controlsfx', name: 'controlsfx', version: '8.20.9'
    } else {
        compile group: 'org.controlsfx', name: 'controlsfx', version: '8.40.12'
        testCompile group: 'org.controlsfx', name: 'controlsfx', version: '8.40.12'
    }
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

task createPom << {
    pom {
        project {
            groupId 'com.xored'
            artifactId 'TRexPacketCraftingTool'
            version '1.0.0'

            inceptionYear '2016'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                }
            }
        }
    }.writeTo("pom.xml")
}

apply plugin: 'javafx-gradle-plugin'

buildscript {
    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.7.0'
    }
    repositories {
        mavenLocal()
        mavenCentral()

    }
}


jfx {
    mainClass = mainClassName
    vendor = 'Xored'
}

